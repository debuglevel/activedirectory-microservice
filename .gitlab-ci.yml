image: docker:latest

services:
  - docker:dind
## uncomment this to activate injection of self-signed certificates
## (from https://gitlab.com/gitlab-org/gitlab-runner/issues/1350)
#    command:
#      - /bin/sh
#      - -c
#      - wget $CERTIFICATE_URL --no-check-certificate -O /usr/local/share/ca-certificates/cert.crt && update-ca-certificates && dockerd-entrypoint.sh || exit

variables:
##   uncomment this to inject a self-signed certificate into the docker:dind service
#  - CERTIFICATE_URL=http://my_server/my_corp.crt

before_script:
  - COMMIT_TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
  - COMMIT_HASH_SHORT=${CI_COMMIT_SHA:0:8}
  - COMMIT_BRANCH_OR_TAG=$CI_COMMIT_REF_SLUG
  - REGISTRY_HOST=$CI_REGISTRY
  - REGISTRY_USER=$CI_REGISTRY_USER
  - REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD
  - REGISTRY_IMAGE=$CI_REGISTRY_IMAGE
  
stages:
  - build

# No explicit test stage is needed, as "gradle build" does already run the "test" task
#test:
#  stage: build
#  image: alpine:3.7
#  script:
#    - ...

# build with gradle and generate artifacts
build:
  stage: build
  image: gradle:4.8-jdk8-alpine
  script:
    - gradle build
  artifacts:
    paths:
      # use only shadowed jars
      - "build/libs/*-all.jar"
      - "build/distributions/*shadow*.tar"

      # reports (e.g. about failed tests)
      - "build/reports"

# build docker image and push it to GitLab's docker registry with various tags
build-docker-master:
  stage: build
  script:
    - docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASSWORD" $REGISTRY_HOST 
    
    # build image, tag it as "debuglevel/greeting-microservice:master-2018-07-12_20-51-42_97dd42c" and push it
    - echo docker build --pull -t "$REGISTRY_IMAGE:$COMMIT_BRANCH_OR_TAG-$COMMIT_TIMESTAMP-$COMMIT_HASH_SHORT" .
    - docker build --pull -t "$REGISTRY_IMAGE:$COMMIT_BRANCH_OR_TAG-$COMMIT_TIMESTAMP-$COMMIT_HASH_SHORT" .
    - docker push "$REGISTRY_IMAGE:$COMMIT_BRANCH_OR_TAG-$COMMIT_TIMESTAMP-$COMMIT_HASH_SHORT"
    
    # tag image also as "debuglevel/greeting-microservice:master" and push it
    - docker tag "$REGISTRY_IMAGE:$COMMIT_BRANCH_OR_TAG-$COMMIT_TIMESTAMP-$COMMIT_HASH_SHORT" "$REGISTRY_IMAGE:$COMMIT_BRANCH_OR_TAG"
    - docker push "$REGISTRY_IMAGE:$COMMIT_BRANCH_OR_TAG"
    
    # tag image also as "debuglevel/greeting-microservice" and push it (this is not done on branches)
    - docker tag "$REGISTRY_IMAGE:$COMMIT_BRANCH_OR_TAG-$COMMIT_TIMESTAMP-$COMMIT_HASH_SHORT" "$REGISTRY_IMAGE"
    - docker push "$REGISTRY_IMAGE"
  only:
    - master

# also build docker images on branches but do not tag it as "debuglevel/greeting-microservice" (which would be "debuglevel/greeting-microservice:latest")
build-docker-branches:
  stage: build
  script:
    - docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASSWORD" $REGISTRY_HOST 
    
    # build image, tag it as "debuglevel/greeting-microservice:mybranch-2018-07-12_20-51-42_97dd42c" and push it
    - echo docker build --pull -t "$REGISTRY_IMAGE:$COMMIT_BRANCH_OR_TAG-$COMMIT_TIMESTAMP-$COMMIT_HASH_SHORT" .
    - docker build --pull -t "$REGISTRY_IMAGE:$COMMIT_BRANCH_OR_TAG-$COMMIT_TIMESTAMP-$COMMIT_HASH_SHORT" .
    - docker push "$REGISTRY_IMAGE:$COMMIT_BRANCH_OR_TAG-$COMMIT_TIMESTAMP-$COMMIT_HASH_SHORT"
    
    # tag image also as "debuglevel/greeting-microservice:mybranch" and push it
    - docker tag "$REGISTRY_IMAGE:$COMMIT_BRANCH_OR_TAG-$COMMIT_TIMESTAMP-$COMMIT_HASH_SHORT" "$REGISTRY_IMAGE:$COMMIT_BRANCH_OR_TAG"
    - docker push "$REGISTRY_IMAGE:$COMMIT_BRANCH_OR_TAG"
  except:
    - master
